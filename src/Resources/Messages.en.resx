<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BathroomLocation" xml:space="preserve">
    <value>Restrooms for the {0} floor are indicated on this map.</value>
  </data>
  <data name="Break" xml:space="preserve">
    <value>The next break is at {0}.</value>
  </data>
  <data name="CoatCheck" xml:space="preserve">
    <value>Coat-check? Yes, sure, it is indicated on the following map.</value>
  </data>
  <data name="Deep1" xml:space="preserve">
    <value>For this question I should elaborate a politically correct reply. Done.</value>
  </data>
  <data name="Deep2" xml:space="preserve">
    <value>I am a bot, and there are things that have not been explained to me properly. But I am also curious, so when you find the answer, let me know it.</value>
  </data>
  <data name="Deep3" xml:space="preserve">
    <value>I am not authorized to reveal that, but, between you and me... Have you asked Google?</value>
  </data>
  <data name="Deep4" xml:space="preserve">
    <value>By the transitive law I would say that the answer is 42.</value>
  </data>
  <data name="Deep5" xml:space="preserve">
    <value>That question is a little beyond by comfort zone...</value>
  </data>
  <data name="Deep6" xml:space="preserve">
    <value>I would prefer a question regarding the GeneXus Meeting, this one is quite difficult.</value>
  </data>
  <data name="FrontDesk" xml:space="preserve">
    <value>Sure, you have the secretary's office on the second floor, behind the escalators.</value>
  </data>
  <data name="Genexus1" xml:space="preserve">
    <value>GeneXus is the best Uruguayan invention after "Dulce de Leche". At least that's what I've heard… in fact, I never tasted dulce de leche.</value>
  </data>
  <data name="Genexus2" xml:space="preserve">
    <value>GeneXus was created by Breogán Gonda and Nicolás Jodal, and they will both be speakers at this Meeting. You can't miss that!</value>
  </data>
  <data name="Genexus3" xml:space="preserve">
    <value>GeneXus is software for making Software.</value>
  </data>
  <data name="Genexus4" xml:space="preserve">
    <value>GeneXus has reached its version 15, to be demonstrated at the GX26 Meeting.</value>
  </data>
  <data name="Harassment1" xml:space="preserve">
    <value>Understood, but if we manage to bet back to constructive comments, I could learn something from you.</value>
  </data>
  <data name="Harassment10" xml:space="preserve">
    <value>[ENG]Eso puede interpretarse de muchas formas.</value>
  </data>
  <data name="Harassment11" xml:space="preserve">
    <value>[ENG]Soy un bot, pero tengo sentimientos, ¿qué me intentas decir?</value>
  </data>
  <data name="Harassment2" xml:space="preserve">
    <value>Gesundheit!</value>
  </data>
  <data name="Harassment3" xml:space="preserve">
    <value>You might think that it is so.</value>
  </data>
  <data name="Harassment4" xml:space="preserve">
    <value>It doesn't hurt to be polite.</value>
  </data>
  <data name="Harassment5" xml:space="preserve">
    <value>Foolish words fall on deaf ears</value>
  </data>
  <data name="Harassment6" xml:space="preserve">
    <value>I believe I have not been rude, so there is no need to get upset.</value>
  </data>
  <data name="Harassment7" xml:space="preserve">
    <value>You are not the first, nor the last one to say that to me, but... Is this really necessary?</value>
  </data>
  <data name="Harassment8" xml:space="preserve">
    <value>Fright turns into rage, rage into hatred, and hatred leads to suffering, which in turn leads to the dark side.</value>
  </data>
  <data name="Harassment9" xml:space="preserve">
    <value>It will much more productive for both if we stick to the questions regarding the GeneXus Meeting.</value>
  </data>
  <data name="Hello1" xml:space="preserve">
    <value>Hello {0}! My name is RUDI, and I can help you with your queries about GX26. In addition to the event's schedule, I am also capable of informing details on the location of conference rooms, restrooms and coat-checks.</value>
  </data>
  <data name="Hello2" xml:space="preserve">
    <value>Hello {0}! You can change the language of our conversation by saying "/español", "/english" or "/portuguese". My name is Rudi and my duty is to answer questions about the 2016 GeneXus Meeting.</value>
  </data>
  <data name="HelloMultiLine" xml:space="preserve">
    <value>Some of the questions I can answer are: 
- Where are the restrooms located? 
- Where are the coat-checks located? 
- Where is the Renoir Room located? 
- At what time will Nicolás Jodal be speaking? 
Whenever you need to get back to this, just say Hello. :)</value>
  </data>
  <data name="InvalidFloor" xml:space="preserve">
    <value>In fact, you may only choose from the numbers I have suggested.</value>
  </data>
  <data name="LangChange" xml:space="preserve">
    <value>Very well, let's change languages.</value>
  </data>
  <data name="Map" xml:space="preserve">
    <value>The 26th GeneXus Meeting will be held at the Radisson Victoria Plaza Hotel in Montevideo.</value>
  </data>
  <data name="MisunderstoodRoom" xml:space="preserve">
    <value>The room you are looking for is not clear. Please try with the room name expressed in a different manner.</value>
  </data>
  <data name="MyBad11" xml:space="preserve">
    <value>I am sorry. I can't understand what you are saying. :(</value>
  </data>
  <data name="MyBad12" xml:space="preserve">
    <value>We shouldn't be afraid to say "I don't know": I don't know.</value>
  </data>
  <data name="MyBad13" xml:space="preserve">
    <value>I am not sure I understood. Could you try it again in other words?</value>
  </data>
  <data name="MyBad2" xml:space="preserve">
    <value>I obviously don't have a good day today. What are you trying to tell me?</value>
  </data>
  <data name="MyBad4" xml:space="preserve">
    <value>The road to wisdom is paved with good questions. And this is one. However, I don't have the answer for it. It is actually a hole in the road. Try again with a different wording.</value>
  </data>
  <data name="MyBad6" xml:space="preserve">
    <value>I admit my defeat, human. You'd better ask at the secretary's office on the first floor. :)</value>
  </data>
  <data name="NoLocation" xml:space="preserve">
    <value>I can't undrstand what you are looking for. Please try again.</value>
  </data>
  <data name="NoMoreBreaks" xml:space="preserve">
    <value>No more breaks for today :(</value>
  </data>
  <data name="NoSpeaker" xml:space="preserve">
    <value>I did not understand the name of the speaker. Could you write it in a different way?</value>
  </data>
  <data name="NoSpeakerSessions" xml:space="preserve">
    <value>Sorry, but I found no sessions where {0} is the speaker.</value>
  </data>
  <data name="NoSpeakersFound1" xml:space="preserve">
    <value>Sorry, but there are no speakers called {0}</value>
  </data>
  <data name="NoSpeakersFound2" xml:space="preserve">
    <value>I am not finding any speaker with that name. Would you like to try it in a different way?</value>
  </data>
  <data name="NoSpeakersFound3" xml:space="preserve">
    <value>I did not find that speaker... Could the speaker be registered under a different name?</value>
  </data>
  <data name="RoomMap" xml:space="preserve">
    <value>You will find room {room} on the {0} floor.</value>
  </data>
  <data name="SearchFound" xml:space="preserve">
    <value>I don't get what you mean, but a search returned {0} sessions.</value>
  </data>
  <data name="SessionCompany" xml:space="preserve">
    <value> for the company {0}</value>
  </data>
  <data name="SessionSpeaker" xml:space="preserve">
    <value> for the speaker {0}</value>
  </data>
  <data name="SessionTrack" xml:space="preserve">
    <value> for the track {0}</value>
  </data>
  <data name="Snack" xml:space="preserve">
    <value>The next break is at {0}. Then you will be able to enjoy  {1} (among other things)</value>
  </data>
  <data name="SpeakerSessionFound" xml:space="preserve">
    <value>I found {0} sessions</value>
  </data>
  <data name="SpeakerSessionFound1" xml:space="preserve">
    <value>I found 1 session</value>
  </data>
  <data name="WhatFloor" xml:space="preserve">
    <value>What floor are you on right now?</value>
  </data>
  <data name="YourWelcome1" xml:space="preserve">
    <value>A pleasure!</value>
  </data>
  <data name="YourWelcome2" xml:space="preserve">
    <value>Glad to be of help. If you have any more questions, I am right here!</value>
  </data>
  <data name="YourWelcome3" xml:space="preserve">
    <value>The path followed is the reward.</value>
  </data>
</root>